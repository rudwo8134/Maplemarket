'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inquirer_1 = require("inquirer");
var config_1 = __importDefault(require("../config"));
var helpers_1 = __importDefault(require("../helpers"));
var command_1 = __importDefault(require("./command"));
var starter_receiver_1 = __importDefault(require("../receivers/starter-receiver"));
var frontend_receiver_1 = __importDefault(require("../receivers/frontend-receiver"));
var backend_receiver_1 = __importDefault(require("../receivers/backend-receiver"));
var wordpress_receiver_1 = __importDefault(require("../receivers/wordpress-receiver"));
var database_receiver_1 = __importDefault(require("../receivers/database-receiver"));
var blank_receiver_1 = __importDefault(require("../receivers/blank-receiver"));
var repo_receiver_1 = __importDefault(require("../receivers/repo-receiver"));
var entity_1 = __importDefault(require("../models/entity"));
var output_color_1 = require("../models/output-color");
var InitCommand = /** @class */ (function (_super) {
    __extends(InitCommand, _super);
    function InitCommand(context) {
        var _this = _super.call(this, context) || this;
        _this.starterCode = '';
        _this.context = context;
        _this.context.registerNonArgFlags(['wizard']);
        _this.context.registerFlagExpansions({
            '-w': '--wizard'
        });
        _this.setReceiver();
        return _this;
    }
    InitCommand.prototype.execute = function () {
        return __awaiter(this, void 0, void 0, function () {
            var flags;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        flags = this.context.getParsedFlags();
                        if (flags.help)
                            return [2 /*return*/, this.help()];
                        if (!flags.wizard) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.startWizard()];
                    case 1:
                        _a.sent();
                        if (!this.receiver) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.receiver.init(this.starterCode)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.printResult([this.receiver ? this.receiver.result : this.results]);
                        return [3 /*break*/, 9];
                    case 4:
                        if (!this.receiver) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.receiver.init()];
                    case 5:
                        _a.sent();
                        this.printResult([this.receiver.result]);
                        return [3 /*break*/, 9];
                    case 6: return [4 /*yield*/, this.detectReceiver()];
                    case 7:
                        _a.sent();
                        if (!this.receiver)
                            return [2 /*return*/, this.help()];
                        this.receiver.result.on('mdb.cli.live.output', function (msg) { return _this.printResult([msg]); });
                        return [4 /*yield*/, this.receiver.init(this.starterCode)];
                    case 8:
                        _a.sent();
                        this.printResult([this.receiver.result]);
                        _a.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    InitCommand.prototype.setReceiver = function () {
        var _this = this;
        var ctx = this.context;
        switch (this.entity) {
            case entity_1.default.Starter:
                this.receiver = new starter_receiver_1.default(ctx);
                break;
            case entity_1.default.Frontend:
                this.receiver = new frontend_receiver_1.default(ctx);
                this.receiver.result.on('mdb.cli.live.output', function (msg) { return _this.printResult([msg]); });
                break;
            case entity_1.default.Backend:
                this.receiver = new backend_receiver_1.default(ctx);
                break;
            case entity_1.default.Database:
                this.receiver = new database_receiver_1.default(ctx);
                break;
            case entity_1.default.Blank:
                this.receiver = new blank_receiver_1.default(ctx);
                break;
            case entity_1.default.Repo:
                this.receiver = new repo_receiver_1.default(ctx);
                this.receiver.result.on('mdb.cli.live.output', function (msg) { return _this.printResult([msg]); });
                break;
            case entity_1.default.Wordpress:
                this.receiver = new wordpress_receiver_1.default(ctx);
                this.receiver.result.on('mdb.cli.live.output', function (msg) { return _this.printResult([msg]); });
                break;
        }
    };
    InitCommand.prototype.startWizard = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projectTypeChoices, projectType, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this._getProjectTypeOptions()];
                    case 1:
                        projectTypeChoices = _c.sent();
                        _a = this.entity;
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project type:', projectTypeChoices)];
                    case 2:
                        _a = (_c.sent());
                        _c.label = 3;
                    case 3:
                        projectType = _a;
                        _b = projectType;
                        switch (_b) {
                            case 'frontend': return [3 /*break*/, 4];
                            case 'backend': return [3 /*break*/, 6];
                            case 'blank': return [3 /*break*/, 8];
                            case 'wordpress': return [3 /*break*/, 9];
                        }
                        return [3 /*break*/, 11];
                    case 4: return [4 /*yield*/, this.frontendWizardForm()];
                    case 5:
                        _c.sent();
                        return [3 /*break*/, 11];
                    case 6: return [4 /*yield*/, this.backendWizardForm()];
                    case 7:
                        _c.sent();
                        return [3 /*break*/, 11];
                    case 8:
                        this.entity = 'blank';
                        this.setReceiver();
                        return [3 /*break*/, 11];
                    case 9: return [4 /*yield*/, this.wordpressWizardForm()];
                    case 10:
                        _c.sent();
                        return [3 /*break*/, 11];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    InitCommand.prototype._getProjectTypeOptions = function () {
        return [
            { name: 'Frontend', short: 'Frontend', value: 'frontend' },
            { name: 'Backend', short: 'Backend', value: 'backend' },
            { name: 'Blank', short: 'Blank', value: 'blank' },
            { name: 'Wordpress', short: 'Wordpress', value: 'wordpress' }
        ];
    };
    InitCommand.prototype.frontendWizardForm = function () {
        return __awaiter(this, void 0, void 0, function () {
            var frontChoices, frontTechnology, licenseChoices, licenseType, versionChoices, technology, mdbVersion, availableStarters, starter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        frontChoices = [
                            { name: 'Standard', short: 'Standard', value: 'Standard' },
                            { name: 'jQuery', short: 'jQuery', value: 'jQuery' },
                            { name: 'Angular', short: 'Angular', value: 'Angular' },
                            { name: 'React', short: 'React', value: 'React' },
                            { name: 'Vue', short: 'Vue', value: 'Vue' },
                        ];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose technology:', frontChoices)];
                    case 1:
                        frontTechnology = _a.sent();
                        licenseChoices = [
                            { name: 'Free', short: 'Free', value: 'Free' },
                        ];
                        if (frontTechnology !== 'Standard')
                            licenseChoices.push({ name: 'Pro', short: 'Pro', value: 'Pro' });
                        else
                            licenseChoices.push({ name: 'Essential', short: 'Essential', value: 'Essential' }, { name: 'Advanced', short: 'Advanced', value: 'Advanced' });
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose license:', licenseChoices)];
                    case 2:
                        licenseType = _a.sent();
                        versionChoices = [
                            frontTechnology !== 'Standard' ?
                                { name: 'MDB 4', short: 'MDB 4', value: 'MDB4' } :
                                { name: 'MDB 5', short: 'MDB 5', value: 'MDB5' }
                        ];
                        technology = 'frontend';
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose MDB version:', versionChoices)];
                    case 3:
                        mdbVersion = _a.sent();
                        return [4 /*yield*/, this._getStartersOptions({}, technology)];
                    case 4:
                        availableStarters = _a.sent();
                        starter = availableStarters.find(function (o) { return o.license === licenseType && o.category === mdbVersion && o.type === technology && o.displayName === frontTechnology; });
                        if (!starter.available) {
                            return [2 /*return*/, this.results.addAlert(output_color_1.OutputColor.Red, 'Error', 'You cannot create project with provided specification. Please visit https://mdbootstrap.com/my-orders/ or run `mdb starters -a` and make sure it is available for you.')];
                        }
                        else if (!starter) {
                            return [2 /*return*/, this.results.addAlert(output_color_1.OutputColor.Red, 'Error', 'We could not initialize any starter with given criteria. Please run `mdb [entity] init` and choose one of the available starters.')];
                        }
                        this.starterCode = starter.code;
                        this.entity = technology;
                        this.receiver = new frontend_receiver_1.default(this.context);
                        return [2 /*return*/];
                }
            });
        });
    };
    InitCommand.prototype.backendWizardForm = function () {
        return __awaiter(this, void 0, void 0, function () {
            var technology, backendChoices, backendTechnology, availableStarters, backendStarters, starter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        technology = 'backend';
                        backendChoices = [
                            { name: 'Node', short: 'Node', value: 'node' },
                            { name: 'PHP', short: 'PHP', value: 'php' },
                        ];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose technology:', backendChoices)];
                    case 1:
                        backendTechnology = _a.sent();
                        return [4 /*yield*/, this._getStartersOptions({}, technology)];
                    case 2:
                        availableStarters = _a.sent();
                        backendStarters = availableStarters
                            .filter(function (o) { return o.type === technology && o.code.includes(backendTechnology) && o.available; })
                            .map(function (o) { return ({ name: o.displayName, short: o.code, value: o.code }); });
                        if (!backendStarters.length) {
                            return [2 /*return*/, this.results.addAlert(output_color_1.OutputColor.Red, 'Error', 'You cannot create project with provided specification. Please visit https://mdbootstrap.com/my-orders/ or run `mdb starters -a` and make sure it is available for you.')];
                        }
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose starter:', backendStarters)];
                    case 3:
                        starter = _a.sent();
                        if (!starter) {
                            return [2 /*return*/, this.results.addAlert(output_color_1.OutputColor.Red, 'Error', 'We could not initialize any starter with given criteria. Please run `mdb [entity] init` and choose one of the available starters.')];
                        }
                        this.starterCode = starter;
                        this.entity = technology;
                        this.receiver = new backend_receiver_1.default(this.context);
                        return [2 /*return*/];
                }
            });
        });
    };
    InitCommand.prototype.wordpressWizardForm = function () {
        return __awaiter(this, void 0, void 0, function () {
            var technology, licenseChoices, licenseType, availableStarters, wordpressStarters, starter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        technology = 'wordpress';
                        licenseChoices = [
                            { name: 'Free', short: 'Free', value: 'Free' },
                            { name: 'Essential', short: 'Essential', value: 'Essential' }
                        ];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose license:', licenseChoices)];
                    case 1:
                        licenseType = _a.sent();
                        return [4 /*yield*/, this._getStartersOptions({}, technology)];
                    case 2:
                        availableStarters = _a.sent();
                        wordpressStarters = availableStarters
                            .filter(function (o) { return o.type === technology && o.license === licenseType && o.available; })
                            .map(function (o) { return ({ name: o.displayName, short: o.code, value: o.code }); });
                        if (!wordpressStarters.length) {
                            return [2 /*return*/, this.results.addAlert(output_color_1.OutputColor.Red, 'Error', 'You cannot create project with provided specification. Please visit https://mdbootstrap.com/my-orders/ or run `mdb starters -a` and make sure it is available for you.')];
                        }
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose starter:', wordpressStarters)];
                    case 3:
                        starter = _a.sent();
                        if (!starter) {
                            return [2 /*return*/, this.results.addAlert(output_color_1.OutputColor.Red, 'Error', 'We could not initialize any starter with given criteria. Please run `mdb [entity] init` and choose one of the available starters.')];
                        }
                        this.starterCode = starter;
                        this.entity = technology;
                        this.receiver = new wordpress_receiver_1.default(this.context);
                        return [2 /*return*/];
                }
            });
        });
    };
    InitCommand.prototype.detectReceiver = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ctx, flags, options, choices, promptShownCount, starter, _a, entity;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.results.on('mdb.cli.live.output', function (msg) { return _this.printResult([msg]); });
                        ctx = this.context;
                        flags = ctx.getParsedFlags();
                        return [4 /*yield*/, this._getStartersOptions(flags)];
                    case 1:
                        options = _b.sent();
                        choices = this._buildStartersList(!flags.all ? options.filter(function (o) { return ['frontend', 'backend', 'wordpress'].includes(o.type); }) : options);
                        promptShownCount = 0;
                        _b.label = 2;
                    case 2:
                        if (promptShownCount++ >= 10) {
                            return [2 /*return*/, this.results.addTextLine('Please run `mdb starter ls` to see available packages.')];
                        }
                        _a = this;
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project to initialize', choices)];
                    case 3:
                        _a.starterCode = _b.sent();
                        if (this.starterCode === 'blank-starter') {
                            this.receiver = new blank_receiver_1.default(ctx);
                            return [2 /*return*/];
                        }
                        starter = options.find(function (o) { return o.code === _this.starterCode; });
                        if (starter.available)
                            return [3 /*break*/, 5];
                        else
                            this.results.liveAlert(output_color_1.OutputColor.Yellow, 'Warning!', "You cannot create this project. Please visit https://mdbootstrap.com/my-orders/ and make sure it is available for you.");
                        _b.label = 4;
                    case 4:
                        if (promptShownCount <= 10) return [3 /*break*/, 2];
                        _b.label = 5;
                    case 5:
                        entity = starter.type;
                        ctx.entity = entity;
                        if (entity === 'frontend')
                            this.receiver = new frontend_receiver_1.default(ctx);
                        else if (entity === 'backend')
                            this.receiver = new backend_receiver_1.default(ctx);
                        else if (entity === 'wordpress')
                            this.receiver = new wordpress_receiver_1.default(ctx);
                        return [2 /*return*/];
                }
            });
        });
    };
    InitCommand.prototype._getStartersOptions = function (flags, technology) {
        return __awaiter(this, void 0, void 0, function () {
            var options, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.context.authenticateUser();
                        options = {
                            hostname: config_1.default.host,
                            path: "/packages/starters?" + (technology ? 'type=' + technology + '&' : '') + (!flags.all ? 'available=true' : ''),
                            headers: { Authorization: "Bearer " + this.context.userToken }
                        };
                        return [4 /*yield*/, new starter_receiver_1.default(this.context).http.get(options)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, JSON.parse(result.body)];
                }
            });
        });
    };
    InitCommand.prototype._buildStartersList = function (options) {
        var starters = options.reduce(function (res, curr) {
            res[curr.category + " " + curr.license] = res[curr.category + " " + curr.license] || [];
            res[curr.category + " " + curr.license].push({
                name: curr.displayName,
                short: curr.code,
                value: curr.code
            });
            return res;
        }, {});
        return Object.keys(starters).reduce(function (res, curr) {
            res.push.apply(res, __spreadArray([new inquirer_1.Separator("---- " + curr + " ----")], starters[curr]));
            return res;
        }, [new inquirer_1.Separator('---- Blank ----'), { name: 'Empty starter', value: 'blank-starter' }]);
    };
    InitCommand.prototype.help = function () {
        this.results.addTextLine('Initialize new entity of a kind.');
        this.results.addTextLine('\nUsage: mdb [entity] init [options]');
        this.results.addTextLine('\nAvailable entities: starter, blank, frontend, backend, wordpress, database, repo');
        this.results.addTextLine('\nOptions:');
        this.results.addTextLine('   -n, --name      \tSet the name of your project right after initializing it');
        this.results.addTextLine("   -db, --database \tSet type of database. Avaliable options: " + config_1.default.databases.join(', '));
        this.results.addTextLine('   -w, --wizard   \tCreate new project with wizard');
        this.printResult([this.results]);
    };
    return InitCommand;
}(command_1.default));
module.exports = InitCommand;
exports.default = InitCommand;
