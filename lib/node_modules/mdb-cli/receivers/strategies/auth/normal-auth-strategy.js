'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inquirer_1 = __importDefault(require("inquirer"));
var auth_strategy_1 = __importDefault(require("./auth-strategy"));
var http_wrapper_1 = __importDefault(require("../../../utils/http-wrapper"));
var config_1 = __importDefault(require("../../../config"));
var NormalAuthStrategy = /** @class */ (function (_super) {
    __extends(NormalAuthStrategy, _super);
    function NormalAuthStrategy(flags, result) {
        var _this = _super.call(this) || this;
        _this.options = {
            hostname: config_1.default.host,
            path: '/auth/login',
            headers: {
                'Content-Type': 'application/json'
            }
        };
        _this.result = result;
        _this.flags = flags;
        return _this;
    }
    NormalAuthStrategy.prototype.login = function () {
        return __awaiter(this, void 0, void 0, function () {
            var http, result, _a, token, message, saved, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.askLoginCredentials()];
                    case 1:
                        _b.sent();
                        http = new http_wrapper_1.default();
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, http.post(this.options)];
                    case 3:
                        result = _b.sent();
                        _a = JSON.parse(result.body)[0], token = _a.token, message = _a.message;
                        if (token) {
                            saved = this.saveToken(token);
                            return [2 /*return*/, saved ? '' : 'Login failed. Could not save token.'];
                        }
                        return [2 /*return*/, "Login failed: " + message];
                    case 4:
                        e_1 = _b.sent();
                        return [2 /*return*/, "Login failed: " + e_1.message];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    NormalAuthStrategy.prototype.askLoginCredentials = function () {
        return __awaiter(this, void 0, void 0, function () {
            var prompt, username, _a, password, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        prompt = inquirer_1.default.createPromptModule();
                        if (!this.flags.username) return [3 /*break*/, 1];
                        _a = { username: this.flags.username };
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, prompt([
                            {
                                type: 'text',
                                message: 'Enter your MDB username',
                                name: 'username',
                                validate: function (value) {
                                    /* istanbul ignore next */
                                    var valid = Boolean(value);
                                    /* istanbul ignore next */
                                    return valid || 'Login must not be empty.';
                                }
                            }
                        ])];
                    case 2:
                        _a = _c.sent();
                        _c.label = 3;
                    case 3:
                        username = (_a).username;
                        if (!this.flags.password) return [3 /*break*/, 4];
                        _b = { password: this.flags.password };
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, prompt([
                            {
                                type: 'password',
                                message: 'Enter your MDB password',
                                name: 'password',
                                mask: '*',
                                validate: function (value) {
                                    /* istanbul ignore next */
                                    var valid = Boolean(value);
                                    /* istanbul ignore next */
                                    return valid || 'Password must not be empty.';
                                }
                            }
                        ])];
                    case 5:
                        _b = _c.sent();
                        _c.label = 6;
                    case 6:
                        password = (_b).password;
                        this.options.data = JSON.stringify({ username: username, password: password });
                        this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
                        return [2 /*return*/];
                }
            });
        });
    };
    NormalAuthStrategy.prototype.register = function () {
        return __awaiter(this, void 0, void 0, function () {
            var http, result, _a, token, loggedin, message, saved, e_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.askRegisterCredentials()];
                    case 1:
                        _b.sent();
                        this.result.liveTextLine('Processing...');
                        http = new http_wrapper_1.default();
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, http.post(this.options)];
                    case 3:
                        result = _b.sent();
                        _a = JSON.parse(result.body)[0], token = _a.token, loggedin = _a.loggedin, message = _a.message;
                        if (loggedin) {
                            saved = this.saveToken(token);
                            return [2 /*return*/, saved ? '' : 'Registration succeeded but the token could not be saved. Try to log in again.'];
                        }
                        return [2 /*return*/, "Could not log in: " + message];
                    case 4:
                        e_2 = _b.sent();
                        return [2 /*return*/, "Registration failed: " + e_2.message];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    NormalAuthStrategy.prototype.askRegisterCredentials = function () {
        return __awaiter(this, void 0, void 0, function () {
            var prompt, passwordValue, answers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        prompt = inquirer_1.default.createPromptModule();
                        passwordValue = '';
                        return [4 /*yield*/, prompt([
                                {
                                    type: 'text',
                                    message: 'Enter your name',
                                    name: 'name',
                                    validate: function (value) {
                                        /* istanbul ignore next */
                                        var valid = Boolean(value) && /^[^()!|&*]+$/.test(value);
                                        /* istanbul ignore next */
                                        return valid || 'Name is invalid.';
                                    }
                                },
                                {
                                    type: 'text',
                                    message: 'Enter username',
                                    name: 'username',
                                    validate: function (value) {
                                        /* istanbul ignore next */
                                        var valid = Boolean(value) && /^[^()!|&*]+$/.test(value);
                                        /* istanbul ignore next */
                                        return valid || 'Username is invalid.';
                                    }
                                },
                                {
                                    type: 'text',
                                    message: 'Enter email',
                                    name: 'email',
                                    validate: function (value) {
                                        /* istanbul ignore next */
                                        var valid = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(value);
                                        /* istanbul ignore next */
                                        return valid || 'Please enter a valid email.';
                                    }
                                },
                                {
                                    type: 'password',
                                    message: 'Enter password',
                                    name: 'password',
                                    mask: '*',
                                    validate: function (value) {
                                        /* istanbul ignore next */
                                        var valid = Boolean(value) && typeof value === 'string' && value.length > 7;
                                        passwordValue = value;
                                        /* istanbul ignore next */
                                        return valid || 'Password is invalid, it should contain at least 8 characters.';
                                    }
                                },
                                {
                                    type: 'password',
                                    message: 'Repeat password',
                                    name: 'repeatPassword',
                                    mask: '*',
                                    validate: function (value) {
                                        /* istanbul ignore next */
                                        var valid = Boolean(value) && typeof value === 'string' && value === passwordValue;
                                        /* istanbul ignore next */
                                        return valid || 'Passwords do not match.';
                                    }
                                }
                            ])];
                    case 1:
                        answers = _a.sent();
                        this.options.path = '/auth/register';
                        this.options.data = JSON.stringify(answers);
                        this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
                        return [2 /*return*/];
                }
            });
        });
    };
    return NormalAuthStrategy;
}(auth_strategy_1.default));
exports.default = NormalAuthStrategy;
