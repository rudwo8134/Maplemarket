'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = __importDefault(require("../../../helpers"));
var config_1 = __importDefault(require("../../../config"));
var output_color_1 = require("../../../models/output-color");
var PipelinePublishStrategy = /** @class */ (function () {
    function PipelinePublishStrategy(context, result, git, http, options) {
        this.cwd = process.cwd();
        this.context = context;
        this.result = result;
        this.packageJsonConfig = context.packageJsonConfig;
        this.flags = context.getParsedFlags();
        this.git = git;
        this.http = http;
        this.options = options;
    }
    PipelinePublishStrategy.prototype.publish = function () {
        return __awaiter(this, void 0, void 0, function () {
            var currentBranch;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.git.currentBranch()];
                    case 1:
                        currentBranch = _a.sent();
                        return [2 /*return*/, this.createJenkinsfile(currentBranch)
                                .then(function () { return _this.git.status(); })
                                .then(function () { return _this.confirmMerge(currentBranch); })
                                .then(function () { return _this.git.push(currentBranch + ":" + config_1.default.mdbgoPipelinePublicBranch); })
                                .then(function () { return _this.confirmSaveSettings(); })
                                .then(function () { return _this.updateProjectStatus(); })];
                }
            });
        });
    };
    PipelinePublishStrategy.prototype.createJenkinsfile = function (currentBranch) {
        return __awaiter(this, void 0, void 0, function () {
            var created;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.result.liveTextLine('Jenkinsfile is required. Creating...');
                        return [4 /*yield*/, helpers_1.default.createJenkinsfile(this.cwd, false)];
                    case 1:
                        created = _a.sent();
                        if (!created)
                            return [2 /*return*/];
                        this.result.liveTextLine('Jenkinsfile created. Committing...');
                        return [4 /*yield*/, this.git.commit('Jenkinsfile', 'Add Jenkinsfile')];
                    case 2:
                        _a.sent();
                        this.result.liveTextLine('Jenkinsfile commited. Pushing...');
                        return [4 /*yield*/, this.git.push(currentBranch)];
                    case 3:
                        _a.sent();
                        this.result.liveTextLine('Jenkinsfile pushed. Proceeding...');
                        return [2 /*return*/];
                }
            });
        });
    };
    PipelinePublishStrategy.prototype.confirmMerge = function (currentBranch) {
        return __awaiter(this, void 0, void 0, function () {
            var confirmed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (currentBranch === config_1.default.mdbgoPipelinePublicBranch)
                            return [2 /*return*/];
                        return [4 /*yield*/, helpers_1.default.createConfirmationPrompt("Your current branch is " + currentBranch + ". Do you want to merge it into " + config_1.default.mdbgoPipelinePublicBranch + "?")];
                    case 1:
                        confirmed = _a.sent();
                        if (!confirmed) {
                            throw new Error('Cannot proceed without merge.');
                        }
                        return [4 /*yield*/, this.git.checkout(config_1.default.mdbgoPipelinePublicBranch)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.git.pull(config_1.default.mdbgoPipelinePublicBranch)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.git.merge(currentBranch)];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PipelinePublishStrategy.prototype.confirmSaveSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var confirm;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.context.mdbConfig.getValue('publishMethod'))
                            return [2 /*return*/];
                        return [4 /*yield*/, helpers_1.default.createConfirmationPrompt('Do you want to use GitLab pipelines as a default publish method?')];
                    case 1:
                        confirm = _a.sent();
                        if (!confirm) return [3 /*break*/, 3];
                        this.context.mdbConfig.setValue('publishMethod', 'pipeline');
                        this.context.mdbConfig.save();
                        return [4 /*yield*/, this.git.commit('.mdb', 'Update .mdb config')];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', 'This time your project will be published using GitLab pipeline. We will remember to ask you again next time.');
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PipelinePublishStrategy.prototype.updateProjectStatus = function () {
        var repoUrl = this.git.getCurrentRemoteUrl();
        var domain = this.context.mdbConfig.getValue('domain');
        var projectName = this.context.mdbConfig.getValue('projectName');
        this.options.data = JSON.stringify({ repoUrl: repoUrl, domain: domain });
        this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
        this.options.headers['Content-Type'] = 'application/json';
        this.options.path = "/project/save/" + projectName;
        return this.http.post(this.options);
    };
    return PipelinePublishStrategy;
}());
exports.default = PipelinePublishStrategy;
