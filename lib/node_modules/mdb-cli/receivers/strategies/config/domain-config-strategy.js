"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inquirer_1 = __importDefault(require("inquirer"));
var config_1 = __importDefault(require("../../../config"));
var entity_1 = __importDefault(require("../../../models/entity"));
var output_color_1 = require("../../../models/output-color");
var publish_command_1 = __importDefault(require("../../../commands/publish-command"));
var http_wrapper_1 = __importDefault(require("../../../utils/http-wrapper"));
var DomainConfigStrategy = /** @class */ (function () {
    function DomainConfigStrategy(context, result) {
        this.flags = {};
        this.context = context;
        this.result = result;
        this.context.authenticateUser();
        this.options = {
            hostname: config_1.default.host,
            headers: { Authorization: "Bearer " + this.context.userToken }
        };
        this.flags = context.getParsedFlags();
    }
    DomainConfigStrategy.prototype.setValue = function (name, value) {
        var _this = this;
        this._validateDomain(value);
        if (this.flags['enable-ssl']) {
            return this.enableSsl(value);
        }
        return this._verifyDomainName(value)
            .then(function (_a) {
            var domain = _a.domain;
            return _this.context.mdbConfig.setValue(name, domain);
        })
            .then(function () { return _this.context.mdbConfig.save(); })
            .then(function () { return _this._publish(); });
    };
    DomainConfigStrategy.prototype.unsetValue = function (name) {
        var _this = this;
        return this._unsetDomain()
            .then(function (_a) {
            var url = _a.url;
            var type = _this.context.mdbConfig.getValue('meta.type');
            if (type === entity_1.default.Frontend) {
                _this.context.mdbConfig.unsetValue(name);
                _this.result.addAlert(output_color_1.OutputColor.Blue, 'Info', "Your project is now available at: " + url);
            }
            else if (type === entity_1.default.Backend || type === entity_1.default.Wordpress) {
                _this.context.mdbConfig.setValue('domain', url);
                _this.result.addAlert(output_color_1.OutputColor.Yellow, 'Warning', "Since this is a " + type + " project we had to reset your domain name to the default one. Your project is now available at: " + url);
            }
        })
            .then(function () { return _this.context.mdbConfig.save(); });
    };
    DomainConfigStrategy.prototype._validateDomain = function (value) {
        if (!/^(?=.{4,255}$)([a-zA-Z0-9_]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9_])?\.){1,126}[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]$/.test(value)) {
            throw new Error('Invalid domain name. Do not add the http(s):// part. If you are using *.mdbgo.io subdomain, don\'t omit the .mdbgo.io part as it won\'t work without it.');
        }
    };
    DomainConfigStrategy.prototype.enableSsl = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var http;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.options.path = "/project/certificate";
                        this.options.data = JSON.stringify({ domainName: domain });
                        this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
                        this.options.headers['Content-Type'] = 'application/json';
                        http = new http_wrapper_1.default();
                        return [4 /*yield*/, http.post(this.options)];
                    case 1:
                        _a.sent();
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', 'Certificate successfully enabled. Now you need to configure your DNS in order to finalize the configuration.');
                        return [2 /*return*/];
                }
            });
        });
    };
    DomainConfigStrategy.prototype._verifyDomainName = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var available, prompt, inputPrompt;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._checkIfExists(value)];
                    case 1:
                        available = _a.sent();
                        if (available)
                            return [2 /*return*/, { domain: value }];
                        prompt = inquirer_1.default.createPromptModule();
                        inputPrompt = prompt([
                            {
                                type: 'text',
                                message: 'Enter new domain name',
                                name: 'domain',
                                validate: function (value) {
                                    try {
                                        _this._validateDomain(value);
                                    }
                                    catch (e) {
                                        return e.message;
                                    }
                                    /* istanbul ignore next */
                                    return _this._checkIfExists(value)
                                        .then(function (available) {
                                        if (!available) {
                                            return 'This name is already taken. Please choose a different one.';
                                        }
                                        return true;
                                    });
                                }
                            }
                        ]);
                        // @ts-ignore
                        inputPrompt.ui.activePrompt.render('This name is already taken. Please choose a different one');
                        return [2 /*return*/, inputPrompt];
                }
            });
        });
    };
    DomainConfigStrategy.prototype._checkIfExists = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var http, result, available;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.options.path = "/project/domain/verify?domain=" + value;
                        http = new http_wrapper_1.default();
                        return [4 /*yield*/, http.get(this.options)];
                    case 1:
                        result = _a.sent();
                        available = JSON.parse(result.body).available;
                        return [2 /*return*/, available];
                }
            });
        });
    };
    DomainConfigStrategy.prototype._unsetDomain = function () {
        return __awaiter(this, void 0, void 0, function () {
            var http, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        http = new http_wrapper_1.default();
                        this.options.path = "/project/update/" + this.context.mdbConfig.getValue('projectName');
                        return [4 /*yield*/, http.put(this.options)];
                    case 1:
                        result = _a.sent();
                        if (result.statusCode >= 200 && result.statusCode <= 299) {
                            return [2 /*return*/, JSON.parse(result.body)];
                        }
                        throw new Error('Error unsetting your domain.');
                }
            });
        });
    };
    DomainConfigStrategy.prototype._publish = function () {
        this.context.entity = this.context.mdbConfig.getValue('meta.type');
        var publish = new publish_command_1.default(this.context);
        return publish.execute();
    };
    return DomainConfigStrategy;
}());
exports.default = DomainConfigStrategy;
