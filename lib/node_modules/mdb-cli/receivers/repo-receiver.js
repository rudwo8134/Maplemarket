'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var config_1 = __importDefault(require("../config"));
var receiver_1 = __importDefault(require("./receiver"));
var helpers_1 = __importDefault(require("../helpers"));
var output_color_1 = require("../models/output-color");
var RepoReceiver = /** @class */ (function (_super) {
    __extends(RepoReceiver, _super);
    function RepoReceiver(context) {
        var _this = _super.call(this, context) || this;
        _this.context.authenticateUser();
        _this.options = {
            hostname: config_1.default.host,
            path: '/repo/create',
            headers: { Authorization: "Bearer " + _this.context.userToken, 'Content-Type': 'application/json' }
        };
        return _this;
    }
    RepoReceiver.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projectName, simple, created, url, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getProjectName()];
                    case 1:
                        projectName = _a.sent();
                        simple = this.context.packageJsonConfig.scripts && this.context.packageJsonConfig.scripts.test ? true : false;
                        return [4 /*yield*/, helpers_1.default.createJenkinsfile(process.cwd(), simple)];
                    case 2:
                        created = _a.sent();
                        if (created) {
                            this.result.liveTextLine('Created required file: Jenkinsfile. Proceeding...');
                        }
                        return [4 /*yield*/, this._createGitLabPipeline(projectName)];
                    case 3:
                        url = _a.sent();
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this._initializeRepository(url)];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        e_1 = _a.sent();
                        if (e_1 && e_1.message && e_1.message.toLowerCase().indexOf('authentication failed') !== -1) {
                            this.result.addAlert(output_color_1.OutputColor.Blue, 'Note', 'There were some authentication problems. Please make sure you provided correct username and password. If you are certain that the credentials are correct and still see this message, please log into your MDB Go GitLab account to activate it here: https://git.mdbgo.com/. Once you do that run the following command:');
                            this.result.addAlert(output_color_1.OutputColor.Turquoise, '\tgit push -u origin master', '');
                        }
                        else {
                            this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not create repository: " + e_1.message);
                        }
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    RepoReceiver.prototype._getProjectName = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projectName, result, e_2, packageJsonEmpty;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        projectName = this.context.mdbConfig.getValue('projectName') || this.context.packageJsonConfig.name;
                        if (!!projectName) return [3 /*break*/, 5];
                        this.result.liveTextLine('package.json file is required. Creating...');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._createPackageJson()];
                    case 2:
                        result = _a.sent();
                        this.context._loadPackageJsonConfig();
                        projectName = this.context.packageJsonConfig.name;
                        this.result.liveTextLine(result);
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _a.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error', e_2);
                        return [2 /*return*/];
                    case 4:
                        packageJsonEmpty = projectName === undefined;
                        if (packageJsonEmpty) {
                            throw new Error('package.json file is required.'); // in case Ctrl+C
                        }
                        _a.label = 5;
                    case 5: return [2 /*return*/, projectName];
                }
            });
        });
    };
    RepoReceiver.prototype._createPackageJson = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.context.loadPackageManager()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.context.packageManager.init(process.cwd())];
                }
            });
        });
    };
    RepoReceiver.prototype._createGitLabPipeline = function (projectName) {
        return __awaiter(this, void 0, void 0, function () {
            var createResult, _a, name, url, webhook, saved, pipeline;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.options.data = JSON.stringify({ projectName: projectName });
                        return [4 /*yield*/, this.http.post(this.options)];
                    case 1:
                        createResult = (_b.sent()).body;
                        _a = JSON.parse(createResult), name = _a.name, url = _a.url, webhook = _a.webhook, saved = _a.saved, pipeline = _a.pipeline;
                        if (webhook === false)
                            this.result.liveAlert(output_color_1.OutputColor.Red, 'Error', 'GitLab webhook not added.');
                        if (saved === false)
                            this.result.liveAlert(output_color_1.OutputColor.Red, 'Error', 'Project data not saved.');
                        if (pipeline === false)
                            this.result.liveAlert(output_color_1.OutputColor.Red, 'Error', 'Jenkins pipeline not created.');
                        if (webhook === false || saved === false || pipeline === false)
                            this.result.addAlert(output_color_1.OutputColor.Red, 'Error', 'There were some errors. Please write to our support https://mdbootstrap.com/support/');
                        this.result.addAlert(output_color_1.OutputColor.Green, '\nSuccess', "Project " + name + " successfully created. Repository url: " + url + "\n");
                        return [2 /*return*/, url];
                }
            });
        });
    };
    RepoReceiver.prototype._initializeRepository = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var gitConfigPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        gitConfigPath = path_1.default.join(process.cwd(), '.git', 'config');
                        if (!fs_1.default.existsSync(gitConfigPath)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.git.setOrigin(url)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.git.push('master')];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 3: return [4 /*yield*/, this.git.init()];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.git.addOrigin(url)];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this.git.commit('.', 'Initial commit')];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, this.git.push('master')];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    return RepoReceiver;
}(receiver_1.default));
exports.default = RepoReceiver;
