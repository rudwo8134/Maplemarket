'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __importDefault(require("../config"));
var receiver_1 = __importDefault(require("./receiver"));
var output_color_1 = require("../models/output-color");
var AppReceiver = /** @class */ (function (_super) {
    __extends(AppReceiver, _super);
    function AppReceiver(context) {
        var _this = _super.call(this, context) || this;
        _this.flags = _this.context.getParsedFlags();
        return _this;
    }
    AppReceiver.prototype.getHelp = function () {
        this.result.addTextLine('\nUsage: mdb [entity] [command] [arg] [flags]\n');
        this.result.addTextLine('Command line interface for MDB environment.\n');
        this.result.addTextLine('Entities:');
        this.result.addTable([
            { Entity: 'starter', Description: 'Manage all kinds of starter projects: frontend & backend' },
            { Entity: 'backend', Description: 'Manage backend projects' },
            { Entity: 'wordpress', Description: 'Manage WordPress projects' },
            { Entity: 'frontend', Description: 'Manage frontend projects' },
            { Entity: 'blank', Description: 'Manage custom (frontend) projects' },
            { Entity: 'database', Description: 'Manage databases' },
            { Entity: 'repo', Description: 'Manage GitLab repository' },
            { Entity: 'config', Description: 'Manage project configuration' },
            { Entity: 'order', Description: 'Manage created orders' },
            { Entity: 'app', Description: 'Manage MDB CLI app' },
            { Entity: 'user', Description: 'Manage users' }
        ]);
        this.result.addTextLine('\nCommands:');
        this.result.addTable([
            { Command: 'help', Description: 'Display this help info. Use with entities: <none>, app (default)' },
            { Command: 'update', Description: 'Update MDB CLI app to the latest version. Use with entities: <none>, app (default)' },
            { Command: 'version', Description: 'Check currently installed version of MDB CLI. Use with entities: <none>, app (default)' },
            { Command: 'register', Description: 'Create a new MDB account. Use with entities: <none>, user (default)' },
            { Command: 'login', Description: 'Log in to your MDB account. Use with entities: <none>, user (default)' },
            { Command: 'logout', Description: 'Log out from MDB CLI. Use with entities: <none>, user (default)' },
            { Command: 'ls', Description: 'List entity content. Use with entities: <none>, starter, frontend (default), backend, database, wordpress, order' },
            { Command: 'init', Description: 'Create something of entity type. Use with entities: <none>, starter, blank, frontend (default), backend, wordpress, database, repo' },
            { Command: 'publish', Description: 'Publish project. Use with entities: <none>, frontend (default), backend, wordpress' },
            { Command: 'get', Description: 'Download a project to the current directory. Use with entities: backend, frontend, wordpress' },
            { Command: 'info', Description: 'Display info about entity. Use with entities: backend, database' },
            { Command: 'delete', Description: 'Completely delete an entity. Use with entities: backend, database, frontend, wordpress' },
            { Command: 'kill', Description: 'Stop a project. Use with entities: backend' },
            { Command: 'destroy', Description: 'Alias for `kill`' },
            { Command: 'logs', Description: 'Display logs of a project. Use with entities: backend' },
            { Command: 'rename', Description: 'Change the project name locally and on public server. Use with entities: <none>' },
        ]);
        this.result.addTextLine('\nAliases:');
        this.result.addTable([
            { Command: 'mdb starters', Description: 'The same as: mdb starter ls' },
            { Command: 'mdb orders', Description: 'The same as: mdb order ls' }
        ]);
        this.result.addTextLine('\nVisit https://mdbootstrap.com/docs/standard/cli/reference/ for full command reference.');
    };
    AppReceiver.prototype.getVersion = function () {
        //@ts-ignore
        var version = (config_1.default.env === 'test' ? require('../../package.json') : require('../package.json')).version;
        this.result.addTextLine('Version: ' + version);
    };
    AppReceiver.prototype.updateApp = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, this.context.loadPackageManager()];
                    case 1:
                        _a.sent();
                        if (!this.context.packageManager) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.context.packageManager.update()];
                    case 2:
                        result = _a.sent();
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', result);
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error:', e_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    AppReceiver.prototype.status = function () {
        return __awaiter(this, void 0, void 0, function () {
            var options, result, status_1, e_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            hostname: config_1.default.host,
                            path: '/app/status'
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.http.get(options)];
                    case 2:
                        result = _a.sent();
                        status_1 = JSON.parse(result.body);
                        Object.keys(status_1).forEach(function (s) {
                            if (status_1[s])
                                _this.result.addAlert(output_color_1.OutputColor.Green, '\u2714', s + " is running");
                            else
                                _this.result.addAlert(output_color_1.OutputColor.Red, '\u2717', s + " is down");
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _a.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error:', e_2);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return AppReceiver;
}(receiver_1.default));
exports.default = AppReceiver;
