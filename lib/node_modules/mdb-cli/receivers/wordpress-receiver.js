'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var open_1 = __importDefault(require("open"));
var inquirer_1 = __importStar(require("inquirer"));
var config_1 = __importDefault(require("../config"));
var receiver_1 = __importDefault(require("./receiver"));
var project_status_1 = require("../models/project-status");
var ftp_publish_strategy_1 = __importDefault(require("./strategies/publish/ftp-publish-strategy"));
var http_wrapper_1 = __importDefault(require("../utils/http-wrapper"));
var helpers_1 = __importDefault(require("../helpers"));
var path_1 = __importDefault(require("path"));
var output_color_1 = require("../models/output-color");
var cli_status_1 = require("../models/cli-status");
var WordpressReceiver = /** @class */ (function (_super) {
    __extends(WordpressReceiver, _super);
    function WordpressReceiver(context) {
        var _this = _super.call(this, context) || this;
        _this.projectName = '';
        _this.starterCode = '';
        _this._publishRetries = 0;
        _this.context.authenticateUser();
        _this.options = {
            hostname: config_1.default.host,
            headers: { Authorization: "Bearer " + _this.context.userToken }
        };
        _this.context.registerNonArgFlags(['advanced', 'open', 'ftp', 'follow', 'help', 'override']);
        _this.context.registerFlagExpansions({
            '-f': '--follow',
            '-n': '--name',
            '-c': '--advanced',
            '-o': '--open',
            '-h': '--help'
        });
        _this.flags = _this.context.getParsedFlags();
        _this.args = _this.context.args;
        return _this;
    }
    WordpressReceiver.prototype.list = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projects, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.result.liveTextLine('Fetching wordpress projects...');
                        return [4 /*yield*/, this.getWordpressProjects()];
                    case 1:
                        projects = _a.sent();
                        if (projects.length) {
                            result = projects.map(function (p) {
                                var technologyMeta = p.projectMeta.find(function (m) { return m.metaKey === '_backend_technology'; });
                                var technology = technologyMeta ? technologyMeta.metaValue : undefined;
                                var portMeta = p.projectMeta.find(function (m) { return m.metaKey === '_container_port'; });
                                var port = portMeta ? portMeta.metaValue : undefined;
                                var isUp = !!port;
                                var url = !!p.domainName ? "http://" + p.domainName : config_1.default.projectsDomain + ":" + port;
                                var deletedFromFTP = p.projectMeta.some(function (m) { return m.metaKey === '_uploaded_to_ftp' && m.metaValue === '0'; });
                                return {
                                    'Project Name': p.projectName,
                                    'Published': new Date(p.publishDate).toLocaleString(),
                                    'Edited': new Date(p.editDate).toLocaleString(),
                                    'Technology': technology,
                                    'Repository': p.repoUrl ? p.repoUrl : '-',
                                    'URL': isUp && !deletedFromFTP ? url : 'Unavailable'
                                };
                            });
                            this.result.addTable(result);
                        }
                        else {
                            this.result.addTextLine('You don\'t have any projects yet.');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype.init = function (starterCode) {
        return __awaiter(this, void 0, void 0, function () {
            var confirmed, options, choices, result, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!process.cwd().endsWith('/wp-content/themes')) return [3 /*break*/, 2];
                        return [4 /*yield*/, helpers_1.default.createConfirmationPrompt('This command should be run inside [...]/wp-content/themes directory. Are you sure you want to continue in the current directory?', false)];
                    case 1:
                        confirmed = _a.sent();
                        if (!confirmed) {
                            return [2 /*return*/, this.result.addTextLine('Initialization aborted.')];
                        }
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this._getWordpressStartersOptions()];
                    case 3:
                        options = _a.sent();
                        choices = this._buildWordpressStartersList(options);
                        if (!starterCode) return [3 /*break*/, 4];
                        this.starterCode = starterCode;
                        this.projectName = this.flags.name || this.starterCode;
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.chooseStarter(choices, options)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        this.options.path = "/packages/download/" + this.starterCode;
                        return [4 /*yield*/, helpers_1.default.downloadFromFTP(this.http, this.options, process.cwd())];
                    case 7:
                        result = _a.sent();
                        this.context.mdbConfig.setValue('meta.starter', this.starterCode);
                        this.context.mdbConfig.setValue('meta.type', 'wordpress');
                        this.context.mdbConfig.setValue('hash', helpers_1.default.generateRandomString());
                        this.context.mdbConfig.save(helpers_1.default.getThemeName(this.starterCode));
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', result);
                        return [3 /*break*/, 9];
                    case 8:
                        e_1 = _a.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not initialize: " + (e_1.message || e_1));
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype.chooseStarter = function (choices, options) {
        return __awaiter(this, void 0, void 0, function () {
            var promptShownCount, _a, project;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        promptShownCount = 0;
                        _b.label = 1;
                    case 1:
                        if (promptShownCount++ >= 10) {
                            return [2 /*return*/, this.result.addTextLine('Please run `mdb starter ls` to see available packages.')];
                        }
                        _a = this;
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project to initialize', choices)];
                    case 2:
                        _a.starterCode = _b.sent();
                        this.projectName = this.flags.name || this.starterCode;
                        project = options.find(function (o) { return o.code === _this.starterCode; });
                        if (project.available)
                            return [3 /*break*/, 4];
                        else
                            this.result.liveAlert(output_color_1.OutputColor.Yellow, 'Warning!', "You cannot create this project. Please visit https://mdbootstrap.com/my-orders/ and make sure it is available for you.");
                        _b.label = 3;
                    case 3:
                        if (promptShownCount <= 10) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype._getWordpressStartersOptions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.options.path = "/packages/starters?type=wordpress" + (!this.flags.all ? '&available=true' : '');
                        return [4 /*yield*/, this.http.get(this.options)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, JSON.parse(result.body)];
                }
            });
        });
    };
    WordpressReceiver.prototype._buildWordpressStartersList = function (options) {
        var starters = options.reduce(function (res, curr) {
            res[curr.category + " " + curr.license] = res[curr.category + " " + curr.license] || [];
            res[curr.category + " " + curr.license].push({
                name: curr.displayName,
                short: curr.code,
                value: curr.code
            });
            return res;
        }, {});
        return Object.keys(starters).reduce(function (res, curr) {
            // @ts-ignore
            res.push.apply(res, __spreadArray([new inquirer_1.Separator("---- " + curr + " ----")], starters[curr]));
            return res;
        }, []);
    };
    WordpressReceiver.prototype.publish = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageVariant, wpData, projectName, email, username;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getPageVariant()];
                    case 1:
                        pageVariant = _a.sent();
                        return [4 /*yield*/, this._getWpData()];
                    case 2:
                        wpData = _a.sent();
                        projectName = this.context.mdbConfig.getValue('projectName');
                        email = this.context.mdbConfig.getValue('wordpress.email');
                        username = this.context.mdbConfig.getValue('wordpress.username') || 'admin';
                        if (!this.context.mdbConfig.getValue('hash')) {
                            this.context.mdbConfig.setValue('hash', helpers_1.default.generateRandomString());
                            this.context.mdbConfig.save();
                        }
                        return [4 /*yield*/, this._handlePublication(pageVariant, projectName, email, username, wpData)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype._getPageVariant = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pageVariant, options, choices;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pageVariant = this.context.mdbConfig.getValue('meta.starter');
                        if (!!pageVariant) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._getWordpressStartersOptions()];
                    case 1:
                        options = _a.sent();
                        choices = this._buildWordpressStartersList(options);
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose page variant:', choices)];
                    case 2:
                        pageVariant = _a.sent();
                        this.context.mdbConfig.setValue('meta.starter', pageVariant);
                        this.context.mdbConfig.setValue('meta.type', 'wordpress');
                        this.context.mdbConfig.save();
                        _a.label = 3;
                    case 3: return [2 /*return*/, pageVariant];
                }
            });
        });
    };
    WordpressReceiver.prototype._getWpData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var wpData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wpData = {};
                        if (!!this.context.mdbConfig.getValue('projectName')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.askWpCredentials(this.flags.advanced)];
                    case 1:
                        wpData = _a.sent();
                        this.context.mdbConfig.setValue('projectName', wpData.pageName.trim().toLowerCase().replace(/ /g, '-').replace(/[^\w-]+/g, ''));
                        this.context.mdbConfig.setValue('wordpress.email', wpData.email);
                        this.context.mdbConfig.setValue('wordpress.username', wpData.username);
                        this.context.mdbConfig.save();
                        _a.label = 2;
                    case 2: return [2 /*return*/, wpData];
                }
            });
        });
    };
    WordpressReceiver.prototype._handlePublication = function (pageVariant, projectName, email, username, wpData) {
        return __awaiter(this, void 0, void 0, function () {
            var strategy, response, firstPublication, payload, e_2, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this._publishRetries++;
                        if (this._publishRetries > 5) {
                            return [2 /*return*/, this.result.addAlert(output_color_1.OutputColor.Red, 'Error', 'Too many retries. Try again running the publish command.')];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 11]);
                        strategy = new ftp_publish_strategy_1.default(this.context, this.result);
                        return [4 /*yield*/, strategy.publish()];
                    case 2:
                        response = _b.sent();
                        firstPublication = response.statusCode === 201;
                        if (!firstPublication) return [3 /*break*/, 4];
                        this.result.liveTextLine('Files uploaded, running your project...');
                        payload = {
                            pageType: pageVariant,
                            pageName: projectName,
                            email: email,
                            username: username,
                            password: wpData.password,
                            repeatPassword: wpData.repeatPassword
                        };
                        return [4 /*yield*/, this._createWpPage(payload)];
                    case 3:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        this.result.addTextLine(response.body);
                        _b.label = 5;
                    case 5: return [3 /*break*/, 11];
                    case 6:
                        e_2 = _b.sent();
                        if (!(e_2.statusCode === cli_status_1.CliStatus.CONFLICT && e_2.message.includes('project name'))) return [3 /*break*/, 9];
                        this.result.liveAlert(output_color_1.OutputColor.Red, 'Error', e_2.message);
                        _a = this;
                        return [4 /*yield*/, helpers_1.default.createTextPrompt('Enter new project name', 'Project name must not be empty.')];
                    case 7:
                        _a.projectName = _b.sent();
                        this.context.mdbConfig.setValue('projectName', this.projectName);
                        this.context.mdbConfig.save();
                        return [4 /*yield*/, this._handlePublication(pageVariant, projectName, email, username, wpData)];
                    case 8:
                        _b.sent();
                        return [3 /*break*/, 10];
                    case 9:
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not publish: " + (e_2.message || e_2));
                        _b.label = 10;
                    case 10: return [3 /*break*/, 11];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype._createWpPage = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var body, _a, url, password, e_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.options.path = '/project/wordpress';
                        this.options.data = JSON.stringify(payload);
                        this.options.headers['Content-Type'] = 'application/json';
                        this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.http.post(this.options)];
                    case 2:
                        body = (_b.sent()).body;
                        _a = JSON.parse(body), url = _a.url, password = _a.password;
                        if (this.flags.open && !!url)
                            open_1.default.call(null, url);
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', '');
                        this.result.addTextLine("\nYour page is available at " + url + "\n");
                        this.result.addTextLine("Your admin panel is available at " + url + "/wp-admin/\n");
                        this.result.addAlert(output_color_1.OutputColor.Yellow, 'Note', 'Please write down your username and password now, as we will not show it again.\n');
                        this.result.addAlert(output_color_1.OutputColor.Turquoise, 'Username:', payload.username);
                        this.result.addAlert(output_color_1.OutputColor.Turquoise, 'Password:', password);
                        this.result.addTextLine('');
                        this.result.addAlert(output_color_1.OutputColor.Blue, 'Info', 'Your URL has been generated based on your username and project name. You can change it by providing the (sub)domain of your choice by running the following command: `mdb config domain <name>`.');
                        return [3 /*break*/, 4];
                    case 3:
                        e_3 = _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not create WordPress page: " + e_3.message);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype.askWpCredentials = function (advanced) {
        return __awaiter(this, void 0, void 0, function () {
            var prompt, passwordValue;
            return __generator(this, function (_a) {
                prompt = inquirer_1.default.createPromptModule();
                passwordValue = '';
                return [2 /*return*/, prompt(__spreadArray(__spreadArray([
                        {
                            type: 'text',
                            message: 'Enter page name',
                            name: 'pageName',
                            validate: function (value) {
                                /* istanbul ignore next */
                                var valid = Boolean(value) && /^[A-Za-z0-9_ ?!-:;+=]+$/.test(value);
                                /* istanbul ignore next */
                                return valid || 'Page name is invalid.';
                            }
                        }
                    ], (advanced ?
                        [{
                                type: 'text',
                                message: 'Enter username',
                                name: 'username',
                                validate: function (value) {
                                    /* istanbul ignore next */
                                    var valid = Boolean(value) && /^[a-z0-9_]+$/.test(value);
                                    /* istanbul ignore next */
                                    return valid || 'Username is invalid.';
                                }
                            },
                            {
                                type: 'password',
                                message: 'Enter password',
                                name: 'password',
                                mask: '*',
                                validate: function (value) {
                                    /* istanbul ignore next */
                                    var valid = Boolean(value) && /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*(\W|_)).{8,}$/.test(value);
                                    passwordValue = value;
                                    /* istanbul ignore next */
                                    return valid || 'Password is incorrect, it should contain at least one uppercase letter, at least one lowercase letter, at least one number, at least one special symbol and it should contain more than 7 characters.';
                                }
                            },
                            {
                                type: 'password',
                                message: 'Repeat password',
                                name: 'repeatPassword',
                                mask: '*',
                                validate: function (value) {
                                    /* istanbul ignore next */
                                    var valid = Boolean(value) && value === passwordValue;
                                    /* istanbul ignore next */
                                    return valid || 'Passwords do not match.';
                                }
                            }]
                        :
                            [])), [
                        {
                            type: 'text',
                            message: 'Enter email',
                            name: 'email',
                            validate: function (value) {
                                /* istanbul ignore next */
                                var valid = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(value);
                                /* istanbul ignore next */
                                return valid || 'Please enter a valid email.';
                            }
                        }
                    ]))];
            });
        });
    };
    WordpressReceiver.prototype.delete = function (projectToDelete) {
        if (projectToDelete === void 0) { projectToDelete = this.flags.name; }
        return __awaiter(this, void 0, void 0, function () {
            var projects, choices, projectName, _a, projectExists, name, _b, result, err_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.getWordpressProjects()];
                    case 1:
                        projects = _c.sent();
                        if (projects.length === 0) {
                            this.result.addTextLine('You don\'t have any projects yet.');
                            return [2 /*return*/, false];
                        }
                        choices = projects.map(function (p) { return ({ name: p.projectName }); });
                        _a = projectToDelete;
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project', choices)];
                    case 2:
                        _a = (_c.sent());
                        _c.label = 3;
                    case 3:
                        projectName = _a;
                        projectExists = projects.some(function (p) { return p.projectName === projectName; });
                        if (!projectExists) {
                            this.result.addTextLine("Project " + projectName + " not found.");
                            return [2 /*return*/, false];
                        }
                        this.result.liveAlert(output_color_1.OutputColor.Yellow, 'Warning', 'This operation cannot be undone, your project and its database will be permanently deleted.');
                        _b = this.flags.force;
                        if (_b) return [3 /*break*/, 5];
                        return [4 /*yield*/, helpers_1.default.createTextPrompt('Confirm deleting selected project by typing its name:', 'Project name must not be empty.')];
                    case 4:
                        _b = (_c.sent());
                        _c.label = 5;
                    case 5:
                        name = _b;
                        if (!this.flags.force && name !== projectName) {
                            this.result.addTextLine('The names do not match.');
                            return [2 /*return*/, false];
                        }
                        this.result.liveTextLine("Unpublishing project " + projectName + "...");
                        this.options.path = "/project/unpublish/" + projectName;
                        _c.label = 6;
                    case 6:
                        _c.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, this.http.delete(this.options)];
                    case 7:
                        result = _c.sent();
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', result.body);
                        return [2 /*return*/, true];
                    case 8:
                        err_1 = _c.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not delete " + projectName + ": " + err_1.message);
                        return [2 /*return*/, false];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projects, choices, projectName, _a, project, result, repoUrlWithNicename, projectPath, query, e_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getWordpressProjects()];
                    case 1:
                        projects = _b.sent();
                        if (projects.length === 0) {
                            return [2 /*return*/, this.result.addTextLine('You don\'t have any projects yet.')];
                        }
                        choices = projects.map(function (p) { return ({ name: p.projectName }); });
                        _a = this.flags.name || this.args[0];
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project', choices)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        projectName = _a;
                        project = projects.find(function (p) { return p.projectName === projectName; });
                        if (!project)
                            return [2 /*return*/, this.result.addTextLine("Project " + projectName + " not found.")];
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 10, , 11]);
                        if (!(project.repoUrl && !this.flags.ftp)) return [3 /*break*/, 6];
                        repoUrlWithNicename = project.repoUrl.replace(/^https:\/\//, "https://" + project.user.userNicename + "@");
                        return [4 /*yield*/, this.git.clone(repoUrlWithNicename)];
                    case 5:
                        result = _b.sent();
                        return [3 /*break*/, 9];
                    case 6:
                        projectPath = path_1.default.join(process.cwd(), projectName);
                        return [4 /*yield*/, helpers_1.default.eraseDirectories(projectPath)];
                    case 7:
                        _b.sent();
                        query = this.flags.force ? '?force=true' : '';
                        this.options.path = "/project/get/" + projectName + query;
                        return [4 /*yield*/, helpers_1.default.downloadFromFTP(this.http, this.options, projectPath)];
                    case 8:
                        result = _b.sent();
                        _b.label = 9;
                    case 9:
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', result);
                        return [3 /*break*/, 11];
                    case 10:
                        e_4 = _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not download " + projectName + ": " + (e_4.message || e_4));
                        return [3 /*break*/, 11];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype.kill = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projects, projectsToPrompt, projectName, _a, projectExists, killType, result, err_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getWordpressProjects()];
                    case 1:
                        projects = _b.sent();
                        if (projects.length === 0) {
                            return [2 /*return*/, this.result.addTextLine('You don\'t have any projects yet.')];
                        }
                        projectsToPrompt = projects.map(function (p) { return ({ name: p.projectName }); });
                        _a = this.flags.name;
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project', projectsToPrompt)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        projectName = _a;
                        projectExists = projects.some(function (p) { return p.projectName === projectName; });
                        if (!projectExists)
                            return [2 /*return*/, this.result.addTextLine("Project " + projectName + " not found.")];
                        killType = this.flags.remove ? 'rmkill' : 'kill';
                        this.options.path = "/project/" + killType + "/" + projectName;
                        this.result.liveTextLine('Fetching data...');
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.http.delete(this.options)];
                    case 5:
                        result = _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', result.body);
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not kill " + projectName + ": " + err_2.message);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype.info = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projects, projectsToPrompt, projectName, _a, projectExists, result, _b, startedAt, killedAt, url, isUp, err_3;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.getWordpressProjects()];
                    case 1:
                        projects = _c.sent();
                        if (projects.length === 0) {
                            return [2 /*return*/, this.result.addTextLine('You don\'t have any projects yet.')];
                        }
                        projectsToPrompt = projects.map(function (p) { return ({ name: p.projectName }); });
                        _a = this.flags.name || this.args[0];
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project', projectsToPrompt)];
                    case 2:
                        _a = (_c.sent());
                        _c.label = 3;
                    case 3:
                        projectName = _a;
                        projectExists = projects.some(function (p) { return p.projectName === projectName; });
                        if (!projectExists)
                            return [2 /*return*/, this.result.addTextLine("Project " + projectName + " not found.")];
                        this.options.path = "/project/info/" + projectName;
                        this.result.liveTextLine('Fetching data...');
                        _c.label = 4;
                    case 4:
                        _c.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.http.get(this.options)];
                    case 5:
                        result = _c.sent();
                        _b = JSON.parse(result.body), startedAt = _b.startedAt, killedAt = _b.killedAt, url = _b.url, isUp = _b.isUp;
                        this.result.addAlert(output_color_1.OutputColor.Turquoise, 'Status:', isUp ? 'running' : 'dead');
                        this.result.addAlert(output_color_1.OutputColor.Turquoise, isUp ? 'Started at:' : 'Killed at:', isUp ? startedAt : killedAt);
                        if (isUp) {
                            this.result.addAlert(output_color_1.OutputColor.Turquoise, 'App URL:', url);
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        err_3 = _c.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error:', err_3.message);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype.logs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projects, projectsToPrompt, projectName, _a, projectExists, _b, lines, tail, follow, followQuery, linesQuery, http, request, result, parsedResult, err_4;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.getWordpressProjects()];
                    case 1:
                        projects = _c.sent();
                        if (projects.length === 0) {
                            return [2 /*return*/, this.result.addTextLine('You don\'t have any projects yet.')];
                        }
                        projectsToPrompt = projects.map(function (p) { return ({ name: p.projectName }); });
                        _a = this.flags.name;
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project', projectsToPrompt)];
                    case 2:
                        _a = (_c.sent());
                        _c.label = 3;
                    case 3:
                        projectName = _a;
                        projectExists = projects.some(function (p) { return p.projectName === projectName; });
                        if (!projectExists)
                            return [2 /*return*/, this.result.addTextLine("Project " + projectName + " not found.")];
                        _b = this.flags, lines = _b.lines, tail = _b.tail, follow = _b.follow;
                        followQuery = follow ? '?follow=true' : '?follow=false';
                        linesQuery = (lines || tail) ? "&lines=" + (lines || tail) : '';
                        this.options.path = "/project/logs/" + projectName + followQuery + linesQuery;
                        this.result.liveTextLine('Fetching data...');
                        if (!follow) return [3 /*break*/, 4];
                        http = new http_wrapper_1.default();
                        request = http.createRawRequest(this.options, function (response) {
                            response.on('data', function (chunk) { return _this.result.liveTextLine(Buffer.from(chunk).toString('utf8')); });
                            response.on('error', function (err) { throw err; });
                        });
                        request.on('error', function (err) { throw err; });
                        request.end();
                        return [3 /*break*/, 7];
                    case 4:
                        _c.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.http.get(this.options)];
                    case 5:
                        result = _c.sent();
                        parsedResult = JSON.parse(result.body);
                        this.result.addTextLine(parsedResult.logs);
                        return [3 /*break*/, 7];
                    case 6:
                        err_4 = _c.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not fetch logs for " + projectName + ": " + err_4.message);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype.restart = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projects, choices, projectName, _a, project, result, err_5;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getWordpressProjects()];
                    case 1:
                        projects = _b.sent();
                        if (projects.length === 0) {
                            return [2 /*return*/, this.result.addTextLine('You don\'t have any projects yet.')];
                        }
                        choices = projects.map(function (p) { return ({ name: p.projectName }); });
                        _a = this.flags.name;
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project', choices)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        projectName = _a;
                        project = projects.find(function (p) { return p.projectName === projectName; });
                        if (!project)
                            return [2 /*return*/, this.result.addTextLine("Project " + projectName + " not found.")];
                        this.options.path = "/project/restart/" + projectName;
                        this.result.liveTextLine('Fetching data...');
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.http.post(this.options)];
                    case 5:
                        result = _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', result.body);
                        return [3 /*break*/, 7];
                    case 6:
                        err_5 = _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not restart project " + projectName + ": " + err_5.message);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projects, choices, projectName, _a, project, technology, result, message, err_6;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getWordpressProjects()];
                    case 1:
                        projects = _b.sent();
                        if (projects.length === 0) {
                            return [2 /*return*/, this.result.addTextLine('You don\'t have any projects yet.')];
                        }
                        choices = projects.map(function (p) { return ({ name: p.projectName }); });
                        _a = this.flags.name;
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project', choices)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        projectName = _a;
                        project = projects.find(function (p) { return p.projectName === projectName; });
                        if (!project)
                            return [2 /*return*/, this.result.addTextLine("Project " + projectName + " not found.")];
                        technology = project.projectMeta.find(function (m) { return m.metaKey === '_backend_technology'; }).metaValue;
                        this.options.path = "/project/run/" + technology + "/" + projectName;
                        this.result.liveTextLine('Fetching data...');
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.http.post(this.options)];
                    case 5:
                        result = _b.sent();
                        message = JSON.parse(result.body).message;
                        this.result.addTextLine(message);
                        return [3 /*break*/, 7];
                    case 6:
                        err_6 = _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not run project " + projectName + ": " + err_6.message);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    WordpressReceiver.prototype.getWordpressProjects = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.options.path = '/project';
                        return [4 /*yield*/, this.http.get(this.options)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, JSON.parse(result.body)
                                .filter(function (p) { return p.status === project_status_1.ProjectStatus.WORDPRESS; })
                                .sort(function (a, b) { return a.editDate < b.editDate; })];
                }
            });
        });
    };
    return WordpressReceiver;
}(receiver_1.default));
exports.default = WordpressReceiver;
