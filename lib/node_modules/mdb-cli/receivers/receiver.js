'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var config_1 = __importDefault(require("../config"));
var helpers_1 = __importDefault(require("../helpers"));
var http_wrapper_1 = __importDefault(require("../utils/http-wrapper"));
var command_result_1 = __importDefault(require("../utils/command-result"));
var git_manager_1 = __importDefault(require("../utils/managers/git-manager"));
var output_color_1 = require("../models/output-color");
var Receiver = /** @class */ (function () {
    function Receiver(context) {
        this.options = {};
        this.flags = {};
        this.context = context;
        this.http = new http_wrapper_1.default();
        this.git = new git_manager_1.default();
        this._result = new command_result_1.default();
    }
    Object.defineProperty(Receiver.prototype, "result", {
        get: function () {
            return this._result;
        },
        enumerable: false,
        configurable: true
    });
    Receiver.prototype.clearResult = function () {
        this._result = new command_result_1.default();
    };
    Receiver.detectEntity = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var entity, http, args, flags, options, projectName, result, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context.registerFlagExpansions({ '-n': '--name' });
                        context.authenticateUser();
                        entity = '';
                        http = new http_wrapper_1.default();
                        args = context.args;
                        flags = context.getParsedFlags();
                        options = {
                            hostname: config_1.default.host,
                            headers: { Authorization: "Bearer " + context.userToken },
                            path: ''
                        };
                        projectName = args[0] || flags.name;
                        if (!projectName) return [3 /*break*/, 4];
                        options.path = '/project/entity/' + projectName;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, http.get(options)];
                    case 2:
                        result = _a.sent();
                        entity = JSON.parse(result.body).entity;
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        throw new Error("Could not auto-detect entity. Please provide it manually or run mdb help. Error: " + e_1.message);
                    case 4: return [2 /*return*/, entity];
                }
            });
        });
    };
    Receiver.prototype.rename = function () {
        return __awaiter(this, void 0, void 0, function () {
            var newName, _a, projectName, query, result, message, err_1, packageJsonPath;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.flags['new-name'];
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, helpers_1.default.createTextPrompt('Enter new project name', 'Project name must not be empty.')];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        newName = _a;
                        projectName = this.getProjectName();
                        query = this.context.packageJsonConfig.dependencies && this.context.packageJsonConfig.dependencies['react'] ? '?update=true' : '';
                        this.options.path = "/project/rename/" + projectName + query;
                        this.options.data = JSON.stringify({ projectName: newName });
                        this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
                        this.options.headers['Content-Type'] = 'application/json';
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.http.post(this.options)];
                    case 4:
                        result = _b.sent();
                        message = JSON.parse(result.body).message;
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', message);
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not rename " + projectName + ": " + err_1.message);
                        return [2 /*return*/];
                    case 6:
                        if (!this.context.packageJsonConfig.name) return [3 /*break*/, 8];
                        packageJsonPath = path_1.default.join(process.cwd(), 'package.json');
                        return [4 /*yield*/, helpers_1.default.serializeJsonFile(packageJsonPath, __assign(__assign({}, this.context.packageJsonConfig), { name: newName }))];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8:
                        this.context.mdbConfig.setValue('projectName', newName);
                        this.context.mdbConfig.save();
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', "Project name successfully changed to " + newName);
                        return [2 /*return*/];
                }
            });
        });
    };
    Receiver.prototype.getProjectName = function () {
        return this.context.packageJsonConfig.name || this.context.mdbConfig.getValue('projectName');
    };
    return Receiver;
}());
exports.default = Receiver;
