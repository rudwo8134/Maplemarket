'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inquirer_1 = __importDefault(require("inquirer"));
var config_1 = __importDefault(require("../config"));
var receiver_1 = __importDefault(require("./receiver"));
var helpers_1 = __importDefault(require("../helpers"));
var output_color_1 = require("../models/output-color");
var DatabaseReceiver = /** @class */ (function (_super) {
    __extends(DatabaseReceiver, _super);
    function DatabaseReceiver(context) {
        var _this = _super.call(this, context) || this;
        _this.context.authenticateUser();
        _this.options = {
            hostname: config_1.default.host,
            headers: { Authorization: "Bearer " + _this.context.userToken }
        };
        _this.context.registerNonArgFlags(['help']);
        _this.context.registerFlagExpansions({
            '-db': '--database',
            '-n': '--name',
            '-h': '--help'
        });
        _this.flags = _this.context.getParsedFlags();
        _this.args = _this.context.args;
        return _this;
    }
    DatabaseReceiver.prototype.list = function () {
        return __awaiter(this, void 0, void 0, function () {
            var databases, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.result.liveTextLine('Fetching databases...');
                        return [4 /*yield*/, this.getDatabases()];
                    case 1:
                        databases = _a.sent();
                        if (databases.length) {
                            result = databases.map(function (db) { return ({
                                'Database': db.database,
                                'Name': db.name,
                                'Username': db.username,
                                'Hostname': db.host,
                                'Connection String': db.connectionString,
                                'Description': db.description
                            }); });
                            this.result.addTable(result);
                        }
                        else {
                            this.result.addTextLine('You don\'t have any databases yet.');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DatabaseReceiver.prototype.getDatabases = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.options.path = '/databases';
                        return [4 /*yield*/, this.http.get(this.options)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, JSON.parse(result.body)];
                }
            });
        });
    };
    DatabaseReceiver.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var database, _a, confirmed, prompt, passwordValue, answers, response, err_1, mysqlMsg, mongoMsg, msg;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.flags.database;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose database', config_1.default.databases)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        database = _a;
                        if (!config_1.default.databases.includes(database)) {
                            return [2 /*return*/, this.result.addTextLine("This database is not supported. Allowed technologies: " + config_1.default.databases.join(', '))];
                        }
                        return [4 /*yield*/, helpers_1.default.createConfirmationPrompt('In order to create a new database, you need to create the database user. Proceed?', true)];
                    case 3:
                        confirmed = _b.sent();
                        if (!confirmed) {
                            return [2 /*return*/, this.result.addAlert(output_color_1.OutputColor.Yellow, 'Warning!', 'Cannot create database without a database user.')];
                        }
                        prompt = inquirer_1.default.createPromptModule();
                        return [4 /*yield*/, prompt([
                                {
                                    type: 'text',
                                    message: 'Enter username',
                                    name: 'username',
                                    validate: function (value) {
                                        /* istanbul ignore next */
                                        var valid = Boolean(value) && /^[a-z0-9_]+$/.test(value);
                                        /* istanbul ignore next */
                                        return valid || 'Username is invalid.';
                                    }
                                },
                                {
                                    type: 'password',
                                    message: 'Enter password',
                                    name: 'password',
                                    mask: '*',
                                    validate: function (value) {
                                        /* istanbul ignore next */
                                        var valid = Boolean(value) && /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*(\W|_)).{8,}$/.test(value);
                                        passwordValue = value;
                                        /* istanbul ignore next */
                                        return valid || 'Password is incorrect, it should contain at least one uppercase letter, at least one lowercase letter, at least one number, at least one special symbol and it should contain more than 7 characters.';
                                    }
                                },
                                {
                                    type: 'password',
                                    message: 'Repeat password',
                                    name: 'repeatPassword',
                                    mask: '*',
                                    validate: function (value) {
                                        /* istanbul ignore next */
                                        var valid = Boolean(value) && typeof value === 'string' && value === passwordValue;
                                        /* istanbul ignore next */
                                        return valid || 'Passwords do not match.';
                                    }
                                },
                                {
                                    type: 'text',
                                    message: 'Enter database name',
                                    name: 'name',
                                    validate: function (value) {
                                        /* istanbul ignore next */
                                        var valid = Boolean(value) && /^[a-z0-9_]+$/.test(value);
                                        /* istanbul ignore next */
                                        return valid || 'Database name is invalid.';
                                    }
                                },
                                {
                                    type: 'text',
                                    message: 'Enter description',
                                    name: 'description'
                                }
                            ])];
                    case 4:
                        answers = _b.sent();
                        answers.database = database;
                        this.options.data = JSON.stringify(answers);
                        this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
                        this.options.headers['Content-Type'] = 'application/json';
                        this.options.path = '/databases';
                        _b.label = 5;
                    case 5:
                        _b.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.http.post(this.options)];
                    case 6:
                        response = _b.sent();
                        response = JSON.parse(response.body);
                        return [3 /*break*/, 8];
                    case 7:
                        err_1 = _b.sent();
                        return [2 /*return*/, this.result.addAlert(output_color_1.OutputColor.Red, 'Error', "Could not create database: " + (err_1.message || err_1))];
                    case 8:
                        mysqlMsg = "You can manage your database with phpMyAdmin at https://phpmyadmin.mdbgo.com/";
                        mongoMsg = "To connect to this database you need to download Robo3T or another MongoDB client";
                        msg = response.database === 'mysql8' ? mysqlMsg : mongoMsg;
                        this.result.addAlert(output_color_1.OutputColor.Red, '\nWarning!', "Write down the password to your database as we will never show it again.\n");
                        this.result.addAlert(output_color_1.OutputColor.Blue, 'Info:', msg + "\n");
                        this.result.addTable([{
                                'Username': response.username,
                                'Password': response.password,
                                'Database Name': response.name,
                                'Connection String': response.connectionString
                            }]);
                        return [2 /*return*/];
                }
            });
        });
    };
    DatabaseReceiver.prototype.delete = function () {
        return __awaiter(this, void 0, void 0, function () {
            var databases, dbName, _a, database, name, err_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getDatabases()];
                    case 1:
                        databases = _b.sent();
                        if (databases.length === 0) {
                            return [2 /*return*/, this.result.addTextLine('You don\'t have any databases yet.')];
                        }
                        _a = this.flags.name;
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose database', databases)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        dbName = _a;
                        database = databases.find(function (db) { return db.name === dbName; });
                        if (!database) {
                            return [2 /*return*/, this.result.addTextLine("Database " + dbName + " not found.")];
                        }
                        this.result.liveAlert(output_color_1.OutputColor.Red, '\nWarning!', 'This operation cannot be undone. If it\'s a misclick you can abort the operation with Ctrl + C\n');
                        return [4 /*yield*/, helpers_1.default.createTextPrompt('Confirm deleting selected database by typing its name:', 'Database name must not be empty.')];
                    case 4:
                        name = _b.sent();
                        if (name !== database.name) {
                            return [2 /*return*/, this.result.addTextLine('The names do not match.')];
                        }
                        this.options.path = "/databases/" + database.databaseId;
                        _b.label = 5;
                    case 5:
                        _b.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.http.delete(this.options)];
                    case 6:
                        _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Green, '\nResult:', 'Database successfully deleted.\n');
                        return [3 /*break*/, 8];
                    case 7:
                        err_2 = _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error:', err_2.message);
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    DatabaseReceiver.prototype.info = function () {
        return __awaiter(this, void 0, void 0, function () {
            var databases, dbName, _a, database;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getDatabases()];
                    case 1:
                        databases = _b.sent();
                        if (databases.length === 0) {
                            return [2 /*return*/, this.result.addTextLine('You don\'t have any databases yet.')];
                        }
                        _a = this.flags.name || this.args[0];
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose database', databases)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        dbName = _a;
                        database = databases.find(function (db) { return db.name === dbName; });
                        if (!database)
                            return [2 /*return*/, this.result.addTextLine("Database " + dbName + " not found.")];
                        this.result.addAlert(output_color_1.OutputColor.Turquoise, '\nConnection String:', database.connectionString);
                        this.result.addAlert(output_color_1.OutputColor.Blue, '\nInfo:', 'The connection string above does not show the password for your database user. You have to replace the \'<password>\' string with your real password in order to connect to the database.\n');
                        return [2 /*return*/];
                }
            });
        });
    };
    DatabaseReceiver.prototype.changeConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var args;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = this.context.args;
                        if (!(args[0] === 'password')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.changePassword()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error:', 'Please provide valid argument!');
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DatabaseReceiver.prototype.changePassword = function () {
        return __awaiter(this, void 0, void 0, function () {
            var databases, dbName, _a, database, err_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getDatabases()];
                    case 1:
                        databases = _b.sent();
                        if (databases.length === 0) {
                            return [2 /*return*/, this.result.addTextLine('You don\'t have any databases yet.')];
                        }
                        _a = this.flags.name;
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose database', databases)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        dbName = _a;
                        database = databases.find(function (db) { return db.name === dbName; });
                        if (!database)
                            return [2 /*return*/, this.result.addTextLine("Database " + dbName + " not found.")];
                        this.options.path = '/databases/password/' + database.databaseId;
                        return [4 /*yield*/, this.askForNewPassword()];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        _b.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.http.put(this.options)];
                    case 6:
                        _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Green, '\nResult:', 'Database password successfully changed.\n');
                        return [3 /*break*/, 8];
                    case 7:
                        err_3 = _b.sent();
                        this.result.addAlert(output_color_1.OutputColor.Red, 'Error:', err_3.message);
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    DatabaseReceiver.prototype.askForNewPassword = function () {
        return __awaiter(this, void 0, void 0, function () {
            var prompt, passwordValue, answers, password, repeatPassword;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        prompt = inquirer_1.default.createPromptModule();
                        return [4 /*yield*/, prompt([
                                {
                                    type: 'password',
                                    message: 'Enter new db password',
                                    name: 'password',
                                    mask: '*',
                                    validate: function (value) {
                                        /* istanbul ignore next */
                                        var valid = Boolean(value) && /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*(\W|_)).{8,}$/.test(value);
                                        passwordValue = value;
                                        /* istanbul ignore next */
                                        return valid || 'Password is incorrect, it should contain at least one uppercase letter, at least one lowercase letter, at least one number, at least one special symbol and it should contain more than 7 characters.';
                                    }
                                },
                                {
                                    type: 'password',
                                    message: 'Re-enter new db password',
                                    name: 'repeatPassword',
                                    mask: '*',
                                    validate: function (value) {
                                        /* istanbul ignore next */
                                        var valid = Boolean(value) && typeof value === 'string' && value === passwordValue;
                                        /* istanbul ignore next */
                                        return valid || 'Passwords do not match.';
                                    }
                                }
                            ])];
                    case 1:
                        answers = _a.sent();
                        password = answers.password, repeatPassword = answers.repeatPassword;
                        if (password !== repeatPassword)
                            throw new Error('Passwords do not match');
                        this.options.data = JSON.stringify(answers);
                        this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);
                        this.options.headers['Content-Type'] = 'application/json';
                        return [2 /*return*/];
                }
            });
        });
    };
    return DatabaseReceiver;
}(receiver_1.default));
exports.default = DatabaseReceiver;
