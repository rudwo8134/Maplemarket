'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var receiver_1 = __importDefault(require("./receiver"));
var helpers_1 = __importDefault(require("../helpers"));
var output_color_1 = require("../models/output-color");
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var BlankReceiver = /** @class */ (function (_super) {
    __extends(BlankReceiver, _super);
    function BlankReceiver(context) {
        var _this = _super.call(this, context) || this;
        _this.projectName = '';
        _this.context.registerFlagExpansions({ '-n': '--name' });
        _this.flags = _this.context.getParsedFlags();
        return _this;
    }
    BlankReceiver.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var initInCurrentFolder, projectPath, _a, _b, err_1, result, simple, err_2;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        initInCurrentFolder = this.context.args.some(function (arg) { return arg === '.'; });
                        if (initInCurrentFolder && fs_1.default.readdirSync(process.cwd()).length !== 0) {
                            return [2 /*return*/, this.result.addAlert(output_color_1.OutputColor.Red, 'Error', 'Destination path `.` already exists and is not an empty directory.')];
                        }
                        projectPath = process.cwd();
                        if (!!initInCurrentFolder) return [3 /*break*/, 8];
                        _a = this;
                        _b = this.flags.name;
                        if (_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, helpers_1.default.createTextPrompt('Enter project name', 'Project name must not be empty.')];
                    case 1:
                        _b = (_c.sent());
                        _c.label = 2;
                    case 2:
                        _a.projectName = _b;
                        return [4 /*yield*/, this.checkProjectNameExists()];
                    case 3:
                        _c.sent();
                        projectPath = path_1.default.join(process.cwd(), this.projectName);
                        _c.label = 4;
                    case 4:
                        _c.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, helpers_1.default.eraseDirectories(projectPath)];
                    case 5:
                        _c.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_1 = _c.sent();
                        return [2 /*return*/, this.result.addAlert(output_color_1.OutputColor.Red, 'Error', err_1)];
                    case 7:
                        fs_1.default.mkdirSync(projectPath);
                        _c.label = 8;
                    case 8: return [4 /*yield*/, this.createPackageJson(projectPath)];
                    case 9:
                        result = _c.sent();
                        this.context._loadPackageJsonConfig(projectPath);
                        _c.label = 10;
                    case 10:
                        _c.trys.push([10, 12, , 13]);
                        simple = !!(this.context.packageJsonConfig.scripts && this.context.packageJsonConfig.scripts.test);
                        return [4 /*yield*/, helpers_1.default.createJenkinsfile(projectPath, simple)];
                    case 11:
                        _c.sent();
                        return [3 /*break*/, 13];
                    case 12:
                        err_2 = _c.sent();
                        return [2 /*return*/, this.result.addAlert(output_color_1.OutputColor.Red, 'Error', err_2)];
                    case 13:
                        this.context.mdbConfig.setValue('projectName', this.context.packageJsonConfig.name);
                        this.context.mdbConfig.setValue('hash', helpers_1.default.generateRandomString());
                        this.context.mdbConfig.save(projectPath);
                        this.result.addAlert(output_color_1.OutputColor.Green, 'Success', "Your project was initialized in " + projectPath);
                        return [2 /*return*/];
                }
            });
        });
    };
    BlankReceiver.prototype.checkProjectNameExists = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projectPath, confirmed, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        projectPath = path_1.default.join(process.cwd(), this.projectName);
                        if (!fs_1.default.existsSync(projectPath)) return [3 /*break*/, 4];
                        return [4 /*yield*/, helpers_1.default.createConfirmationPrompt("Folder " + this.projectName + " already exists, do you want to rename project you are creating now?", true)];
                    case 1:
                        confirmed = _b.sent();
                        if (!confirmed) return [3 /*break*/, 4];
                        _a = this;
                        return [4 /*yield*/, helpers_1.default.createTextPrompt('Enter new project name', 'Project name must not be empty.')];
                    case 2:
                        _a.projectName = _b.sent();
                        return [4 /*yield*/, this.checkProjectNameExists()];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    BlankReceiver.prototype.createPackageJson = function (cwd) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.context.loadPackageManager()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.context.packageManager.init(cwd)];
                }
            });
        });
    };
    return BlankReceiver;
}(receiver_1.default));
exports.default = BlankReceiver;
