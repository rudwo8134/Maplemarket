'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var progress_1 = __importDefault(require("progress"));
var stream_1 = require("stream");
var unzipper_1 = __importDefault(require("unzipper"));
function downloadFromFTP(http, options, destination) {
    return new Promise(function (resolve, reject) {
        var request = http.createRawRequest(options, function (response) {
            var result = '', message = '';
            var readStream = new stream_1.Readable();
            readStream._read = function () { };
            var len = Number(response.headers['content-length']);
            var bar = new progress_1.default('[:bar] :eta s', {
                complete: '=',
                incomplete: ' ',
                width: 100,
                total: len
            });
            response.on('data', function (chunk) {
                if (response.statusCode === 200) {
                    readStream.push(chunk);
                    bar.tick(chunk.length);
                }
                else {
                    message += Buffer.from(chunk).toString('utf8');
                }
            });
            response.on('end', function () {
                var statusCode = response.statusCode, statusMessage = response.statusMessage;
                if (statusCode === 200) {
                    result = 'Download completed.';
                    readStream.push(null);
                }
                else {
                    reject(message || statusMessage);
                }
            });
            try {
                readStream.pipe(unzipper_1.default.Extract({ path: destination })).on('close', function () { return resolve(result); });
            }
            catch (e) {
                reject('Download error.');
            }
        });
        request.on('error', reject);
        request.end();
    });
}
exports.default = downloadFromFTP;
