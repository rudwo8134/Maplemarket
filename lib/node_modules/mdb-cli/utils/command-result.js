'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __importDefault(require("events"));
var CommandResult = /** @class */ (function (_super) {
    __extends(CommandResult, _super);
    function CommandResult() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        _this._messages = [];
        return _this;
    }
    Object.defineProperty(CommandResult.prototype, "messages", {
        get: function () {
            return this._messages;
        },
        enumerable: false,
        configurable: true
    });
    CommandResult.prototype.addTextLine = function (msg) {
        this._messages.push({ type: 'text', value: msg });
    };
    CommandResult.prototype.addTable = function (table) {
        this._messages.push({ type: 'table', value: table });
    };
    CommandResult.prototype.addAlert = function (color, title, body) {
        this._messages.push({ type: 'alert', value: { title: title, body: body }, color: color });
    };
    CommandResult.prototype.liveTextLine = function (msg) {
        this._liveOutput({ type: 'text', value: msg });
    };
    CommandResult.prototype.liveTable = function (table) {
        this._liveOutput({ type: 'table', value: table });
    };
    CommandResult.prototype.liveAlert = function (color, title, body) {
        this._liveOutput({ type: 'alert', value: { title: title, body: body }, color: color });
    };
    CommandResult.prototype._liveOutput = function (msg) {
        this.emit('mdb.cli.live.output', { messages: [msg] });
    };
    return CommandResult;
}(events_1.default));
exports.default = CommandResult;
