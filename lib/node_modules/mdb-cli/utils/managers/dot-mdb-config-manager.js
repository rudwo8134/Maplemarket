"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var config_1 = __importDefault(require("../../config"));
var dot_mdb_1 = require("../../models/dot-mdb");
var DotMdbConfigManager = /** @class */ (function () {
    function DotMdbConfigManager() {
        this.mdbConfig = {};
        this.globalConfig = {};
        this._load();
    }
    DotMdbConfigManager.prototype.getValue = function (keyPath, global) {
        if (global === void 0) { global = false; }
        this.validateConfigKey(keyPath);
        var pathSplit = keyPath.split('.');
        var temp = __assign({}, (global ? this.globalConfig : this.mdbConfig));
        for (var _i = 0, pathSplit_1 = pathSplit; _i < pathSplit_1.length; _i++) {
            var part = pathSplit_1[_i];
            if (!temp.hasOwnProperty(part)) {
                return undefined;
            }
            // @ts-ignore
            temp = temp[part];
        }
        return temp;
    };
    DotMdbConfigManager.prototype.setValue = function (keyPath, value, global) {
        if (global === void 0) { global = false; }
        this.validateConfigKey(keyPath, global);
        this._setKeyPathValue(global ? this.globalConfig : this.mdbConfig, keyPath, value);
    };
    DotMdbConfigManager.prototype.unsetValue = function (keyPath, global) {
        if (global === void 0) { global = false; }
        this.validateConfigKey(keyPath, global);
        this._unsetKeyPathValue(global ? this.globalConfig : this.mdbConfig, keyPath);
    };
    DotMdbConfigManager.prototype.validateConfigKey = function (keyPath, global) {
        if (global === void 0) { global = false; }
        var pathSplit = keyPath.split('.');
        var temp = global ? dot_mdb_1.DOT_MDB_GLOBAL_SCHEME : dot_mdb_1.DOT_MDB_SCHEME;
        pathSplit.forEach(function (part) {
            if (!temp.hasOwnProperty(part)) {
                throw new Error("Invalid config: " + keyPath);
            }
            // @ts-ignore
            temp = temp[part];
        });
    };
    DotMdbConfigManager.prototype.save = function (cwd, global) {
        if (cwd === void 0) { cwd = process.cwd(); }
        if (global === void 0) { global = false; }
        var settingsPath = path_1.default.join(global ? config_1.default.tokenDir : cwd, '.mdb');
        var settings = global ? this.globalConfig : this.mdbConfig;
        try {
            fs_1.default.writeFileSync(settingsPath, JSON.stringify(settings, null, 2), 'utf8');
        }
        catch (e) {
            throw new Error("Could not save config file: " + e);
        }
    };
    DotMdbConfigManager.prototype._load = function () {
        var settingsPath = path_1.default.join(process.cwd(), '.mdb');
        var globalSettingsPath = path_1.default.join(config_1.default.tokenDir, '.mdb');
        try {
            var config_2 = fs_1.default.readFileSync(settingsPath, 'utf8');
            this.mdbConfig = JSON.parse(config_2);
        }
        catch (e) {
            this.mdbConfig = {};
        }
        try {
            var globalConfig = fs_1.default.readFileSync(globalSettingsPath, 'utf8');
            this.globalConfig = JSON.parse(globalConfig);
        }
        catch (e) {
            this.globalConfig = {};
        }
    };
    DotMdbConfigManager.prototype._unsetKeyPathValue = function (object, keyPath) {
        var pathSplit = keyPath.split('.');
        if (pathSplit.length === 1) {
            if (object.hasOwnProperty(keyPath)) {
                // @ts-ignore
                delete object[keyPath];
            }
            return;
        }
        // @ts-ignore
        this._unsetKeyPathValue(object[pathSplit[0]] || {}, pathSplit.slice(1).join('.'));
    };
    DotMdbConfigManager.prototype._setKeyPathValue = function (object, keyPath, value) {
        var pathSplit = keyPath.split('.');
        if (pathSplit.length === 1) {
            // @ts-ignore
            return object[keyPath] = value;
        }
        else {
            // @ts-ignore
            object[pathSplit[0]] = object[pathSplit[0]] || {};
        }
        // @ts-ignore
        this._setKeyPathValue(object[pathSplit[0]], pathSplit.slice(1).join('.'), value);
    };
    return DotMdbConfigManager;
}());
exports.default = DotMdbConfigManager;
