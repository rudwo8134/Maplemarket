'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __importDefault(require("../../config"));
var child_process_1 = __importDefault(require("child_process"));
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var cli_status_1 = require("../../models/cli-status");
var GitManager = /** @class */ (function () {
    function GitManager() {
        this.cmd = 'git';
        this.cwd = process.cwd();
        this.isWindows = process.platform === 'win32';
    }
    GitManager.prototype.checkout = function (branchName) {
        if (branchName === void 0) { branchName = 'master'; }
        return this._task(['checkout', '-B', branchName], "Switched to branch " + branchName + ".", 'Problem with git branch change.');
    };
    GitManager.prototype.clone = function (repoUrl, projectName) {
        var gitArgs = projectName ? ['clone', repoUrl, projectName] : ['clone', repoUrl];
        return this._task(gitArgs, 'Success.', 'There were some errors. Please try again.');
    };
    GitManager.prototype.commit = function (filename, message) {
        return __awaiter(this, void 0, void 0, function () {
            var err_1, commitMsg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this._task(['add', filename], '', 'Problem with git add command.')];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 3:
                        commitMsg = this.isWindows ? "\"" + message + "\"" : message;
                        return [2 /*return*/, this._task(['commit', '-m', commitMsg], '', 'Problem with git commit command.')];
                }
            });
        });
    };
    GitManager.prototype.currentBranch = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var _a, _b;
            var gitBranch = _this._spawn(['rev-parse', '--abbrev-ref', 'HEAD']);
            (_a = gitBranch.stdout) === null || _a === void 0 ? void 0 : _a.on('data', function (data) { return resolve(data.toString().trim()); });
            (_b = gitBranch.stderr) === null || _b === void 0 ? void 0 : _b.on('data', function (data) { return reject(data.toString()); });
        });
    };
    GitManager.prototype.merge = function (branchName) {
        return this._task(['merge', branchName], '', 'Problem with git branch merge.');
    };
    GitManager.prototype.pull = function (branchName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var _a, _b;
            var gitPull = _this._spawn(['pull', 'origin', branchName]);
            var result = '';
            (_a = gitPull.stdout) === null || _a === void 0 ? void 0 : _a.on('data', function (data) {
                result = "\n" + data;
                console.log(result);
            });
            (_b = gitPull.stderr) === null || _b === void 0 ? void 0 : _b.on('data', function (data) {
                result = "\n" + data;
                console.error(result);
            });
            gitPull.on('exit', function (code) {
                if (code === 0 || result.indexOf("Couldn't find remote ref " + branchName) !== -1)
                    resolve();
                else
                    reject('Problem with project fetching from GitLab.');
            });
        });
    };
    GitManager.prototype.push = function (branchName) {
        return this._task(['push', '-u', 'origin', branchName], '', 'Problem with uploading to GitLab.');
    };
    GitManager.prototype.status = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var _a, _b;
            var gitStatus = _this._spawn(['status']);
            (_a = gitStatus.stdout) === null || _a === void 0 ? void 0 : _a.on('data', function (data) {
                if (data.indexOf('nothing to commit, working tree clean') !== -1)
                    resolve();
                else
                    reject('You have uncommited changes in your project, please commit and try again.');
            });
            (_b = gitStatus.stderr) === null || _b === void 0 ? void 0 : _b.on('data', function (data) { return reject(data.toString()); });
        });
    };
    GitManager.prototype.getCurrentRemoteUrl = function () {
        var gitConfigPath = path_1.default.join(this.cwd, '.git', 'config');
        var gitConfigContent = fs_1.default.existsSync(gitConfigPath) ? fs_1.default.readFileSync(gitConfigPath, 'utf8') : '';
        var lines = gitConfigContent.replace(/\t/g, '').split('\n');
        for (var i = 0; i < lines.length; i++) {
            if (lines[i].startsWith('[remote')) {
                var _a = lines[i + 1].split(' = '), url = _a[1];
                if (url.startsWith(config_1.default.gitlabUrl))
                    return url;
            }
        }
        return '';
    };
    GitManager.prototype.setOrigin = function (origin) {
        return this._task(['remote', 'set-url', 'origin', origin], '', 'Problem with setting remote url.');
    };
    GitManager.prototype.addOrigin = function (origin) {
        return this._task(['remote', 'add', 'origin', origin], '', 'Problem with adding remote url.');
    };
    GitManager.prototype.init = function () {
        return this._task(['init'], 'Successfully initialized empty repository', 'Problem with initializing empty repository.');
    };
    GitManager.prototype._spawn = function (args, showOutput, cwd) {
        if (showOutput === void 0) { showOutput = false; }
        if (cwd === void 0) { cwd = this.cwd; }
        return child_process_1.default.spawn(this.cmd, args, __assign(__assign({ cwd: cwd }, this.isWindows && { shell: true }), showOutput && { stdio: 'inherit' }));
    };
    GitManager.prototype._task = function (args, successMsg, errorMsg, cwd) {
        var _this = this;
        if (cwd === void 0) { cwd = this.cwd; }
        return new Promise(function (resolve, reject) {
            var task = _this._spawn(args, true, cwd);
            task.on('error', function (error) { return reject(error); });
            task.on('exit', function (code) { return code === cli_status_1.CliStatus.SUCCESS ? resolve(successMsg) : reject(errorMsg); });
        });
    };
    return GitManager;
}());
exports.default = GitManager;
